console.log("Завдання: 1 ==============================");

// Функція task1 не приймає жодних аргументів
function task1() {
  /**
   * Функція `getData` симулює отримання даних з асинхронного джерела, такого як запит до бази даних або API.
   *
   * @param {Object} data - вхідні дані.
   * @param {number} timeout - час в мілісекундах, який витрачається на отримання даних, за замовчуванням 2000мс.
   * @returns {Promise} - Проміс, який повертає дані або викидає помилку.
   */
  function getData(data, timeout = 2000) {
    return new Promise((resolve, reject) => {
      // Функція повертає новий проміс
      // За допомогою setTimeout ми симулюємо затримку timeout, яка виникає при роботі з асинхронними джерелами даних
      setTimeout(() => {
        // Якщо об'єкт не пустий, ми викликаємо resolve з data
        if (Object.keys(data).length > 0) {
          resolve(data);
        } else {
          // Якщо об'єкт пустий, ми викликаємо reject з новим об'єктом Error("Об'єкт пустий")
          reject(new Error("Об'єкт пустий"));
        }
      }, timeout);
    });
  }

  // Ми викликаємо getData з об'єктом { name: "John", age: 30, city: "New York" } і часом очікування 2000
  const dataObject = { name: "John", age: 30, city: "New York" };

  getData(dataObject)
    .then((result) => {
      // Ми обробляємо дані, повернуті промісом
      // У разі успіху виводимо в консоль дані
      console.log("Отримані дані:", result);
    })
    .catch((error) => {
      // У разі помилки виводимо повідомлення помилки
      console.error("Помилка:", error.message);
    })
    .finally(() => {
      // Незалежно від того, завершилось виконання проміса успіхом чи ні виводимо в консоль "Завдання 1 завершено"
      console.log("Завдання 1 завершено");
    });
}

// Викликаємо функцію task1
task1();